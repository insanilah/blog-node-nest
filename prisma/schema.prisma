generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model categories {
  id              String  @id @default(uuid()) 
  created_at      DateTime?         @db.Timestamp(6)
  name            String?           @db.VarChar(255)
  updated_at      DateTime?         @db.Timestamp(6)
  is_deleted      Boolean?
  post_categories post_categories[]
}

model comments {
  id         String  @id @default(uuid())
  content    String?
  created_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  author_id  String
  post_id    String
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkh4c7lvsc298whoyd4w9ta25cr")
  users      users     @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkn2na60ukhs76ibtpt9burkm27")
}

model likes {
  id         String  @id @default(uuid())
  created_at DateTime? @db.Timestamp(6)
  updated_at DateTime? @db.Timestamp(6)
  post_id    String
  user_id    String
  users      users     @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fknvx9seeqqyy71bij291pwiwrg")
  posts      posts     @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkry8tnr4x2vwemv2bb0h5hyl0x")
}

model post_categories {
  post_id     String
  category_id String
  categories  categories @relation(fields: [category_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fkb4lve46iv2mn28s6sflk8iksn")
  posts       posts      @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fkejkd5tjmy9c8yiulv59wp9ai4")

  @@id([post_id, category_id]) // Mengatur composite key
}

model post_tags {
  post_id String
  tag_id  String
  posts   posts  @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fkkifam22p4s1nm3bkmp1igcn5w")
  tags    tags   @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fkm6cfovkyqvu5rlm6ahdx3eavj")

  @@id([post_id, tag_id]) // Mengatur composite key
}

model posts {
  id              String            @id @default(uuid())
  content         String?
  created_at      DateTime?         @db.Timestamp(6)  @default(now())
  published       Boolean
  slug            String?           @unique @db.VarChar(255)
  title           String?           @unique @db.VarChar(255)
  updated_at      DateTime?         @db.Timestamp(6)
  author_id       String
  comments        comments[]
  likes           likes[]
  post_categories post_categories[] 
  post_tags       post_tags[]       
  user            users?             @relation(fields: [author_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk6xvn0811tkyo3nfjk2xvqx6ns")
}

model roles {
  id        String  @id @default(uuid())
  role_name String  @unique(map: "uk716hgxp60ym1lifrdgp67xt5k") @db.VarChar(255)
  users     users[]
}

model tags {
  id         String  @id @default(uuid())
  name       String?     @db.VarChar(255)
  created_at DateTime?   @db.Timestamp(6)
  updated_at DateTime?   @db.Timestamp(6)
  post_tags  post_tags[] 
}

model users {
  id         String     @id @default(uuid())
  created_at DateTime   @default(now()) @db.Timestamp(6)
  email      String?    @unique @db.VarChar(255)
  password   String?    @db.VarChar(255)
  updated_at DateTime?  @updatedAt @db.Timestamp(6)
  username   String?    @db.VarChar(255)
  name       String?    @db.VarChar(255)
  role_id    String?
  comments   comments[]
  likes      likes[]
  posts      posts[]
  roles      roles?     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fkp56c1712k691lhsyewcssf40f")
}
